#!/bin/bash
# vim: ft=sh sw=2:

# $OSL/nodes/bashrc-console-fm  sourced by  $AjB/bashrc-console  &  $MSn/WSL/bashrc

locx () { locate -i $1 | xcol $1; }

#=> dts
# date time-sorted lists

fa () { find * -printf %TY-%Tm-%Td\ %TH:%TM\ %p\\n | sort; }  # all files

#==> by extension
alias fx='fdtsExt'
# fx csv
# fx gfm
# fx gitignore  # $DJH/search/dts-gitignore.fgc

fdtsExt () {
  if [ $1 ]; then
    fl=dts-$1.ffl
    fE1="*.$1"; [[ $1 = 'gitignore' ]] && fE1=".$1"
    find . \
      -path '*/Cop-code/*'         -prune -o \
      -path '*/copied-code/*'      -prune -o \
      -path '*/copied-reference/*' -prune -o \
      -path '*/CGHrepos/*'         -prune -o \
      -path '*/dev-An/*'           -prune -o \
      -path '*/vimfiles/*'         -prune -o \
      -iname "$fE1" -printf %TY-%Tm-%Td\ %TH:%TM\ %p\\n | sort >> $fl
    echo '' >> $fl
  else
    echo "^ need a file type (= filename extension)"
  fi
}

#==> by string in name
alias fsn=fdts_string_in_name

fdts_string_in_name () {
  if [ $1 ]; then
    ff=dts-$1_in_name.ffl
    echo "" > $ff; echo $PWD >> $ff; echo "" >> $ff
    find . -iname "*$1*" -printf %TY-%Tm-%Td\ %TH:%TM\ %p\\n | sort >> $ff
    echo "" >> $ff; echo "results are in $ff"
  fi
}

#=> file mime types
fmtypes () {
  fml=file-mime.list
  echo "vim: ft=fileMimeList:" > $fml
  echo "" >> $fml
  fd -tf -x file -i {} | sort >> $fml
  echo "" >> $fml
} # use to check within a directory

#=> filetype frequencies
exts () { fd -tf -u '\..+' | sed -n 's/..*\.//p' | sort | uniq -c; } # counted by extensions

ve () {
  exts > exts0
  sed -i 's/^ \+//' exts0
  sed -i 's/ /`/' exts0
  sed -i 's/\r/ /' exts0
  sort -nr exts0 > exts1; rm exts0
  sed -i '0,/^1`/ s/^1`/\n1`/' exts1  # add line before counts of 1, which could be many
  paste -sd ' ' exts1 > exts.exts; rm exts1  # concatenate all lines
  sed -i '1i\\' exts.exts  # prepend a blank line
  sed -i 's/  /\n\n/' exts.exts  # separate out those counts of 1
  echo '' >> exts.exts
  echo "- now look in exts.exts"
} # sorted by frequency, making use of  $vimfiles/syntax/exts.vim

#=> nnn
[ -n "$NNNLVL" ] && PS1="N$NNNLVL $PS1"

n() {
  # no nesting of nnn in subshells
    [ "${NNNLVL:-0}" -eq 0 ] || { echo "nnn is already running"; return; }
  NNN_TMPFILE=${XDG_CONFIG_HOME:-$HOME/.config}/nnn/.lastd  # cd on quit only on ^G
  [ -s "/usr/bin/cpg" ] && progress=-r  # advcpmv is installed
  command nnn $progress -Q -U "$@"
  if [ -f $NNN_TMPFILE ]; then
    # ~/.config/nnn/.lastd  was created when quitting  nnn, so
    . $NNN_TMPFILE
    rm -f $NNN_TMPFILE > /dev/null
  fi
}

# ~/.config/nnn/.selection - only populated when I've selected some files

source $culLA/jo/bashrc-console-NNN_BMS  # my bookmarks
export NNN_COLORS='5723' # good for my tmux in urxvt
export NNN_PLUG='c:fzcd;d:dragdrop;g:gitroot;i:ipinfo;j:autojump;o:fzopen;m:mediainf;s:chksum'
export NNN_TRASH=1 # trash (needs  trash-cli) instead of delete
export NNN_LOCKER='saidar -c' # for 0

# t (sort)
#  a/d = (d &) apparent/disk usage
#  c = clear
#  e = extension
#  r = reverse
#  s = file size
#  t = time
#  v = version (of what?)

#=> trash
alias gte='gio trash --empty'

# trash-cli
alias tl='trash-list' # can give clues if python errors
alias tre='trash-restore'

